{"version":3,"sources":["pages/StylesPages/Cast.module.css","defaultImage/defaultIcon.jpg","pages/Cast.js"],"names":["module","exports","Cast","movieId","useParams","useState","cast","setCast","useEffect","movieAPI","then","WrapperContainer","className","s","container","list","map","actor","item","profile_path","img","src","alt","name","original_name","defaultImage","descContainer","descName","descChar","character","id"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,IAAM,kBAAkB,KAAO,mBAAmB,KAAO,mBAAmB,cAAgB,4BAA4B,SAAW,yB,wHCD1K,MAA0B,wC,wBCQ1B,SAASC,IACtB,IAAQC,EAAYC,cAAZD,QACR,EAAwBE,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,WACRC,IAA0BN,GAASO,KAAKH,KACvC,CAACJ,IAGF,cAACQ,EAAA,EAAD,UACE,qBAAKC,UAAWC,IAAEC,UAAlB,SACGR,GACC,oBAAIM,UAAWC,IAAEE,KAAjB,SACGT,EAAKA,KAAKU,KAAI,SAAAC,GAAK,OAClB,qBAAmBL,UAAWC,IAAEK,KAAhC,UACGD,EAAME,aACL,qBACEP,UAAWC,IAAEO,IACbC,IAAG,yCAAoCJ,EAAME,cAC7CG,IAAKL,EAAMM,MAAQN,EAAMO,gBAG3B,qBACEZ,UAAWC,IAAEO,IACbC,IAAKI,EACLH,IAAKL,EAAMM,MAAQN,EAAMO,gBAG7B,sBAAKZ,UAAWC,IAAEa,cAAlB,UACE,mBAAGd,UAAWC,IAAEc,SAAhB,SACGV,EAAMM,MAAQN,EAAMO,gBAEvB,oBAAGZ,UAAWC,IAAEe,SAAhB,wBAAsCX,EAAMY,kBAlBvCZ,EAAMa","file":"static/js/cast.a69c8773.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cast_container__3dgCw\",\"img\":\"Cast_img__1E2E-\",\"list\":\"Cast_list__2hr_f\",\"item\":\"Cast_item__1mfab\",\"descContainer\":\"Cast_descContainer__yncM4\",\"descName\":\"Cast_descName__2hHel\"};","export default __webpack_public_path__ + \"static/media/defaultIcon.5233db62.jpg\";","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport WrapperContainer from '../components/WrapperContainer';\nimport * as movieAPI from '../services/moviedb-API';\nimport defaultImage from '../defaultImage/defaultIcon.jpg';\nimport s from './StylesPages/Cast.module.css';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    movieAPI.fetchMovieIdCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return (\n    <WrapperContainer>\n      <div className={s.container}>\n        {cast && (\n          <ul className={s.list}>\n            {cast.cast.map(actor => (\n              <li key={actor.id} className={s.item}>\n                {actor.profile_path ? (\n                  <img\n                    className={s.img}\n                    src={`https://image.tmdb.org/t/p/w300${actor.profile_path}`}\n                    alt={actor.name || actor.original_name}\n                  />\n                ) : (\n                  <img\n                    className={s.img}\n                    src={defaultImage}\n                    alt={actor.name || actor.original_name}\n                  />\n                )}\n                <div className={s.descContainer}>\n                  <p className={s.descName}>\n                    {actor.name || actor.original_name}\n                  </p>\n                  <p className={s.descChar}>Character: {actor.character}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </WrapperContainer>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.number,\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      actor: PropTypes.string.isRequired,\n    }),\n  ),\n};\n"],"sourceRoot":""}